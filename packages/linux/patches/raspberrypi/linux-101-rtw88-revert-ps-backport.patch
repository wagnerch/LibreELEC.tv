From b19c9e11632fbe5b3e8353707534436df832e3f2 Mon Sep 17 00:00:00 2001
From: Chad Wagner <47257594+wagnerch@users.noreply.github.com>
Date: Sat, 17 Jun 2023 10:23:51 -0400
Subject: [PATCH] Revert "wifi: rtw88: correct PS calculation for
 SUPPORTS_DYNAMIC_PS"

This reverts commit a7e9c2e407080496686f88a707676b84d50ee8ec.
---
 drivers/net/wireless/realtek/rtw88/mac80211.c | 14 +++---
 drivers/net/wireless/realtek/rtw88/main.c     |  4 +-
 drivers/net/wireless/realtek/rtw88/ps.c       | 43 -------------------
 drivers/net/wireless/realtek/rtw88/ps.h       |  2 -
 4 files changed, 11 insertions(+), 52 deletions(-)

diff --git a/drivers/net/wireless/realtek/rtw88/mac80211.c b/drivers/net/wireless/realtek/rtw88/mac80211.c
index fabca307867a..62fb28f14c94 100644
--- a/drivers/net/wireless/realtek/rtw88/mac80211.c
+++ b/drivers/net/wireless/realtek/rtw88/mac80211.c
@@ -88,6 +88,15 @@ static int rtw_ops_config(struct ieee80211_hw *hw, u32 changed)
 		}
 	}
 
+	if (changed & IEEE80211_CONF_CHANGE_PS) {
+		if (hw->conf.flags & IEEE80211_CONF_PS) {
+			rtwdev->ps_enabled = true;
+		} else {
+			rtwdev->ps_enabled = false;
+			rtw_leave_lps(rtwdev);
+		}
+	}
+
 	if (changed & IEEE80211_CONF_CHANGE_CHANNEL)
 		rtw_set_channel(rtwdev);
 
@@ -197,7 +206,6 @@ static int rtw_ops_add_interface(struct ieee80211_hw *hw,
 	rtwvif->bcn_ctrl = bcn_ctrl;
 	config |= PORT_SET_BCN_CTRL;
 	rtw_vif_port_config(rtwdev, rtwvif, config);
-	rtw_recalc_lps(rtwdev, vif);
 
 	mutex_unlock(&rtwdev->mutex);
 
@@ -228,7 +236,6 @@ static void rtw_ops_remove_interface(struct ieee80211_hw *hw,
 	rtwvif->bcn_ctrl = 0;
 	config |= PORT_SET_BCN_CTRL;
 	rtw_vif_port_config(rtwdev, rtwvif, config);
-	rtw_recalc_lps(rtwdev, NULL);
 
 	mutex_unlock(&rtwdev->mutex);
 }
@@ -421,9 +428,6 @@ static void rtw_ops_bss_info_changed(struct ieee80211_hw *hw,
 	if (changed & BSS_CHANGED_ERP_SLOT)
 		rtw_conf_tx(rtwdev, rtwvif);
 
-	if (changed & BSS_CHANGED_PS)
-		rtw_recalc_lps(rtwdev, NULL);
-
 	rtw_vif_port_config(rtwdev, rtwvif, config);
 
 	mutex_unlock(&rtwdev->mutex);
diff --git a/drivers/net/wireless/realtek/rtw88/main.c b/drivers/net/wireless/realtek/rtw88/main.c
index 4c8164db4a9e..8080ace5ed51 100644
--- a/drivers/net/wireless/realtek/rtw88/main.c
+++ b/drivers/net/wireless/realtek/rtw88/main.c
@@ -248,8 +248,8 @@ static void rtw_watch_dog_work(struct work_struct *work)
 	 * more than two stations associated to the AP, then we can not enter
 	 * lps, because fw does not handle the overlapped beacon interval
 	 *
-	 * rtw_recalc_lps() iterate vifs and determine if driver can enter
-	 * ps by vif->type and vif->cfg.ps, all we need to do here is to
+	 * mac80211 should iterate vifs and determine if driver can enter
+	 * ps by passing IEEE80211_CONF_PS to us, all we need to do is to
 	 * get that vif and check if device is having traffic more than the
 	 * threshold.
 	 */
diff --git a/drivers/net/wireless/realtek/rtw88/ps.c b/drivers/net/wireless/realtek/rtw88/ps.c
index 7ac35c368d7a..dc0d85218245 100644
--- a/drivers/net/wireless/realtek/rtw88/ps.c
+++ b/drivers/net/wireless/realtek/rtw88/ps.c
@@ -299,46 +299,3 @@ void rtw_leave_lps_deep(struct rtw_dev *rtwdev)
 
 	__rtw_leave_lps_deep(rtwdev);
 }
-
-struct rtw_vif_recalc_lps_iter_data {
-	struct rtw_dev *rtwdev;
-	struct ieee80211_vif *found_vif;
-	int count;
-};
-
-static void __rtw_vif_recalc_lps(struct rtw_vif_recalc_lps_iter_data *data,
-				 struct ieee80211_vif *vif)
-{
-	if (data->count < 0)
-		return;
-
-	if (vif->type != NL80211_IFTYPE_STATION) {
-		data->count = -1;
-		return;
-	}
-
-	data->count++;
-	data->found_vif = vif;
-}
-
-static void rtw_vif_recalc_lps_iter(void *data, u8 *mac,
-				    struct ieee80211_vif *vif)
-{
-	__rtw_vif_recalc_lps(data, vif);
-}
-
-void rtw_recalc_lps(struct rtw_dev *rtwdev, struct ieee80211_vif *new_vif)
-{
-	struct rtw_vif_recalc_lps_iter_data data = { .rtwdev = rtwdev };
-
-	if (new_vif)
-		__rtw_vif_recalc_lps(&data, new_vif);
-	rtw_iterate_vifs(rtwdev, rtw_vif_recalc_lps_iter, &data);
-
-	if (data.count == 1 && data.found_vif->cfg.ps) {
-		rtwdev->ps_enabled = true;
-	} else {
-		rtwdev->ps_enabled = false;
-		rtw_leave_lps(rtwdev);
-	}
-}
diff --git a/drivers/net/wireless/realtek/rtw88/ps.h b/drivers/net/wireless/realtek/rtw88/ps.h
index 5ae83d2526cf..c194386f6db5 100644
--- a/drivers/net/wireless/realtek/rtw88/ps.h
+++ b/drivers/net/wireless/realtek/rtw88/ps.h
@@ -23,6 +23,4 @@ void rtw_enter_lps(struct rtw_dev *rtwdev, u8 port_id);
 void rtw_leave_lps(struct rtw_dev *rtwdev);
 void rtw_leave_lps_deep(struct rtw_dev *rtwdev);
 enum rtw_lps_deep_mode rtw_get_lps_deep_mode(struct rtw_dev *rtwdev);
-void rtw_recalc_lps(struct rtw_dev *rtwdev, struct ieee80211_vif *new_vif);
-
 #endif
-- 
2.34.1

